<<SOAP Over JMS>>
SOAP over JMS (Java Message Service) is a communication protocol that allows SOAP-based web services to be transmitted over JMS messaging infrastructure instead of the more common HTTP transport.
For Liberty:
Migrate your web services to use the JAX-WS (Java API for XML Web Services) standard and JMS components to use the JMS API.
Update your server.xml file to include the necessary features, such as jaxws-2.3, jms-2.0, and the JMS provider-specific features.
For Spring Boot:
Migrate your web services to use Spring Web Services (Spring-WS) with SOAP over JMS support. Migrate your JMS components to use Spring JMS or Spring Integration.

<<Websphere Startup Beans Service API>>
WebSphere Startup Beans Service API is a proprietary feature provided by WebSphere Application Server traditional that allows you to configure and
execute specific Java beans or Enterprise JavaBeans (EJBs) automatically during server startup.
This feature enables you to perform initialization tasks, such as setting up resources, initializing databases, or starting background processes when your application starts.
For Liberty:
Use standard Java EE mechanisms, such as @Startup annotation with EJB singleton beans or javax.servlet.ServletContextListener, for executing code at startup.
For Spring Boot:
Use Spring-specific mechanisms, such as implementing the org.springframework.context.ApplicationListener interface, using @PostConstruct annotation,
or defining a CommandLineRunner or ApplicationRunner bean for executing code at startup.

<<Websphere SDO>>
WebSphere Service Data Objects (SDO) API is a proprietary feature provided by WebSphere Application Server traditional that enables a unified data access model for heterogeneous data sources.
SDO API facilitates data access and manipulation for XML documents, relational databases, and other data sources in a consistent manner.
For Open Liberty:
Use standard Java mechanisms, such as Java Persistence API (JPA) for relational databases, Java API for XML Processing (JAXP) or JAXB for XML documents, and other appropriate APIs for your specific data sources.
For Spring Boot:
Use Spring-specific mechanisms, such as Spring Data JPA for relational databases, Spring Data MongoDB for MongoDB data store, Spring Web Services (Spring-WS) for XML documents,

<<Websphere Scheduler API>>
WebSphere Scheduler API is a proprietary feature provided by WebSphere Application Server traditional that enables you to schedule, manage, and execute tasks at specific times or intervals.
This API offers various scheduling options, such as fixed-rate, fixed-delay, and cron-like expressions, as well as the ability to persist scheduled tasks in a database.
For Liberty:
Use standard Java mechanisms, such as javax.enterprise.concurrent.ManagedScheduledExecutorService from the Java EE Concurrency Utilities API or the java.util.concurrent.ScheduledExecutorService
from the Java SE Executor framework for task scheduling.
For Spring Boot:
Use Spring-specific mechanisms, such as the org.springframework.scheduling.TaskScheduler interface, the @Scheduled annotation, or the org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler class for task scheduling.
Openshift Cron can also be used to replace scheduled tasks.
If the tasks are persisted in DB, we may need a custom solution or Quartz


<<Websphere Client API>>
WebSphere Application Clients API is a proprietary feature provided by WebSphere Application Server traditional that allows you to create standalone Java applications,
known as "application clients," which can access and interact with resources and services hosted on the WebSphere Application Server.
These application clients use various communication protocols, such as RMI/IIOP, JMS, or Web Services, to interact with server-side components like EJBs or other server resources.

Migrate the server side components as REST microservices, and  update the application clients to communicate to new microservices instead of using WebSphere Application Client API.

<<Websphere Connector Architecture API>>
WebSphere Connector Architecture API is an implementation of the Java EE Connector Architecture (JCA) specification provided by the WebSphere Application Server traditional.
JCA is a standard for connecting Java EE applications to external systems, such as Enterprise Information Systems (EIS) like databases, messaging systems, or legacy applications.
JCA defines a set of contracts and APIs for creating resource adapters, which act as intermediaries between Java EE applications and external systems.
Migrate your resource adapters to alternative communication mechanisms.
Depending on whether you are migrating to Open Liberty or Spring Boot, the process will differ:
For Liberty:
Use standard Java mechanisms, such as JDBC for relational databases, JMS for messaging systems, or other appropriate APIs for your specific external systems.
For Spring Boot:
Use Spring-specific mechanisms, such as Spring Data JPA for relational databases, Spring Data MongoDB for MongoDB data store, Spring Integration for messaging systems,
or other appropriate Spring Data projects for your specific external systems.

<<Websphere Enterprise Java Beans APIs and SPIs>>
WebSphere Enterprise Java Beans (EJB) APIs and SPIs are provided by WebSphere Application Server traditional as an implementation of the Java EE EJB specification.
EJBs are server-side components that encapsulate the business logic of an enterprise application. They can be Stateless, Stateful, or Singleton session beans, and Message-Driven beans.
EJBs support various features, such as transactions, security, and concurrency control.

For Liberty:
Use Java EE technologies like CDI (Contexts and Dependency Injection) and JPA (Java Persistence API) to refactor your EJB components into POJOs (Plain Old Java Objects) that perform the same business logic.

For Spring Boot:
Use the Spring Framework to refactor your EJB components into POJOs (Plain Old Java Objects) that perform the same business logic.
You can use Spring Beans, Spring Data, and other relevant Spring modules for this purpose.

Please refer wiki to Migrate EJBs to Spring Beans

<<Websphere Exception APIs and SPIs>>
WebSphere Exception APIs and SPIs are provided by WebSphere Application Server traditional as an implementation of custom exception handling in Java EE applications.
They define a set of exceptions and error handling mechanisms specific to the WebSphere environment.

For Liberty:
Use standard Java exception handling mechanisms to refactor your custom exceptions and error handling logic.
Replace any WebSphere-specific exception classes with standard Java exceptions or create your own custom exception classes that extend standard Java exceptions.

For Spring Boot:
Use Spring Boot's exception handling features, such as @ExceptionHandler and @ControllerAdvice, to refactor your custom exceptions and error handling logic.

<<Websphere Extention Registry APIs>>
WebSphere Extension Registry APIs provide a mechanism for registering and discovering extensions in the WebSphere Application Server traditional.
These APIs allow you to plug in custom implementations for various services and features provided by WebSphere.

For Liberty:
Use standard Java EE mechanisms like CDI (Contexts and Dependency Injection) or other appropriate technologies for implementing your custom extensions.
Refactor your custom implementations to work with these mechanisms, and update your application configuration accordingly.

For Spring Boot:
Use the Spring Framework and its extension mechanisms, such as Spring Beans or custom auto-configuration, to implement your custom extensions.
Refactor your custom implementations to work with these mechanisms, and update your application configuration accordingly.

<<WebSphere logging and RAS>> 3
WebSphere logging and RAS (Reliability, Availability, and Serviceability) APIs and SPIs are used in WebSphere Application Server traditional to interact with the logging and tracing infrastructure.
They enable developers to create custom loggers and trace components, as well as configure and manage the logging system

For Open Liberty:
Use the standard Java logging API (java.util.logging) or a third-party logging framework like Log4j or SLF4J.
Update your application code to use these mechanisms and configure the logging system in the server.xml file.

For Spring Boot:
Use the default Spring Boot logging system based on Logback or a third-party logging framework like Log4j or java.util.logging.
Update your application code to use these mechanisms and configure the logging system in the application.properties or application.yml file.

Ensure the logging is redirected to STDOUT or Console.

<<WebSphere ORB (Object Request Broker) Extensions APIs>> 1
WebSphere ORB (Object Request Broker) Extensions APIs are used in WebSphere Application Server traditional for working with CORBA (Common Object Request Broker Architecture) and IIOP (Internet Inter-Orb Protocol).
They enable developers to build distributed applications with interoperability between different programming languages and platforms.

<<Websphere Service Integration Bus API>> 2
WebSphere Service Integration Bus (SIB) is a messaging system provided by WebSphere Application Server traditional (WAS).
It enables asynchronous communication between applications and components using message-driven beans (MDBs), JMS, and other messaging APIs.
SIB provides features like message routing, delivery, and message persistence.

Refactor your application to use the chosen messaging system instead of SIB. This may involve changes to your message-driven beans, JMS clients, and other messaging components.
Update your application configuration to connect to the new messaging system.
For Open Liberty: Use the Java EE or Jakarta EE messaging APIs with the chosen messaging system, and configure the necessary
resources in your server.xml file.
For Spring Boot: Use Spring JMS or a messaging system-specific API (e.g., Kafka APIs, RabbitMQ APIs), and configure the necessary
resources using Spring's Java or XML configuration.

<<WebSphere SMF (System Management Facilities) Recording APIs>> 1
WebSphere SMF (System Management Facilities) Recording APIs are used to collect and record performance data for applications running on IBM WebSphere Application Server traditional (WAS) on z/OS.
SMF is a z/OS subsystem that provides a standardized way to collect and store performance and utilization data for various components of the operating system and applications.


Refactor your workload to use the Dyntrace instead of WebSphere SMF Recording APIs.
This may involve adding monitoring libraries, annotations, or configuration settings to your application code and configuration files.


<<Tivoli Performance Viewer (TPV) SPIs>> 1
Tivoli Performance Viewer (TPV) is a performance monitoring tool provided by IBM WebSphere Application Server traditional (WAS) that allows you to collect,
view, and analyze performance data for your applications. TPV Service Provider Interfaces (SPIs) enable you to customize and extend the functionality of
TPV by implementing your own performance monitoring components.

Refactor your workload to use the Dyntrace instead of WebSphere SMF Recording APIs.
This may involve adding monitoring libraries, annotations, or configuration settings to your application code and configuration files

<<WebSphere Extension Helper SPIs>> 1
WebSphere Extension Helper SPIs (Service Provider Interfaces) are used in IBM WebSphere Application Server traditional (WAS)
to extend the functionality of the server by providing custom implementations for various services.  These SPIs allow developers to create
custom extensions to WebSphere and interact with various server components.

Analyse If the custom implementations has any specific value try to bring the logic to Application code Using Liberty/Spring Boot.

<<WebSphere UDDI (Universal Description, Discovery, and Integration) APIs>> 2
WebSphere UDDI (Universal Description, Discovery, and Integration) APIs are used in IBM WebSphere Application Server traditional (WAS)
for discovering and interacting with web services in a standardized way.  UDDI is a registry where web services can be published, and
clients can discover and bind to those services.

Choose alternative service discovery mechanisms and APIs. If the APIs are rewritten to REST APIS, then no need for UDDI replacements.
If for some reason WebServices are retained as-is then a Service Registry like Eureka can help.

<<WebSphere Workload Manager (WLM) APIs >> 4
WebSphere Workload Manager (WLM) APIs are used in IBM WebSphere Application Server traditional (WAS) to distribute and manage workloads across multiple server instances,
clusters, or cells. It helps balance the workload and ensures optimal performance and high availability for applications.

Migrating to OpenShift/K8S automatically mitigates this issue via Auto Scaling.


<<WebSphere Studio Application Developer Integration Edition APIs>> 4

WebSphere Studio Application Developer Integration Edition (WSADIE) APIs were used for the development and integration of applications,
web services, and other components in IBM WebSphere Application Server traditional (WAS) using the WebSphere Studio Application Developer Integration Edition.
This IDE was a part of the IBM Rational Software suite.

As WSADIE is an older development environment, it is not recommended to continue using it when migrating from WebSphere traditional to Open Liberty,
Spring Boot, or a microservices architecture deployed in OpenShift.

Migrate to Eclipse

<<WebSphere Performance Monitoring Infrastructure (PMI)>> 2
WebSphere Performance Monitoring Infrastructure (PMI) APIs are used to monitor and manage the performance of applications,
components, and resources in IBM WebSphere Application Server traditional (WAS). PMI provides a set of counters and statistics
that can help you identify performance bottlenecks, optimize your applications, and ensure high availability.

Migrate Workload to Dynatrace, approved PMI tool for Horizon Openshift

<<WebSphere Portal APIs>>1
WebSphere Portal APIs are used for developing, deploying, and managing applications in IBM WebSphere Portal,
which is an enterprise portal solution that provides a framework for integrating applications, content, and services into a unified web-based user experience.

Migrate your application components and content:

Refactor your application to use the chosen web application and content management solutions instead of WebSphere Portal APIs.
This may involve updating your application code, configuration files, and content to ensure compatibility with Open Liberty, Spring Boot, or OpenShift.

For Open Liberty: Use Java EE, Jakarta EE, or MicroProfile technologies to develop your web applications, and integrate with
frontend libraries and frameworks like React, Angular, or Vue.js as needed.
For Spring Boot: Use Spring MVC, Spring WebFlux, or Spring RESTful web services to develop your web applications, and integrate with
frontend libraries and frameworks like React, Angular, or Vue.js as needed.

Content can moved to dedicates CMS/Static Site Generators


<<WSSecurityHelper>> 2
The WSSecurityHelper class is a part of the IBM WebSphere Application Server (WAS) traditional proprietary API,
which is used for working with WS-Security features, such as signing and encrypting SOAP messages, token handling, and configuring security policies.
When migrating from WebSphere traditional to Open Liberty, Spring Boot, or a microservices architecture deployed in OpenShift,
you will need to remediate the use of WSSecurityHelper and other WAS-specific security APIs.

Migrate to alternate Security mechanisms
For Open Liberty: Use the Jakarta XML Web Services (JAX-WS) and Jakarta RESTful Web Services (JAX-RS) security features, such as WS-Security, WS-SecurityPolicy, and WS-Trust.
You can also use the MicroProfile JWT Propagation specification for securing microservices.
For Spring Boot: Use Spring Security, which provides extensive security features for web applications, including authentication, authorization,
OAuth2, JWT, and more. Spring Security can be used in conjunction with Spring Web Services or Spring Boot RESTful web services for securing SOAP and REST services.

<<WebSphere Resource Adapter APIs >>2
WebSphere Resource Adapter APIs are used for developing, deploying, and managing Java Connector Architecture (JCA) resource
adapters in IBM WebSphere Application Server traditional (WAS).  Resource adapters provide a standardized way for Java EE applications
to interact with external systems like databases, messaging systems, and other Enterprise Information Systems (EIS).

Choose alternative integration solutions:
Select integration solutions that are suitable for your target environment (Open Liberty, Spring Boot, or OpenShift).
These solutions may include platform-specific resource adapters, JCA resource adapters provided by external systems,
or other integration technologies like RESTful web services, messaging systems, or custom APIs.

<<WebSphere Remote Request Dispatcher APIs>>1
WebSphere Remote Request Dispatcher APIs are specific to IBM WebSphere Application Server traditional (WAS) and are used
for dispatching and executing remote requests in a WebSphere environment.

Choose alternative remote request solutions:
Select remote request solutions that are suitable for your target environment (Open Liberty, Spring Boot, or OpenShift).
These solutions may include RESTful web services or messaging systems.

<<WebSphere Optimized Local Adapters (OLA)>> 2
WebSphere Optimized Local Adapters (OLA) APIs are part of the IBM WebSphere Application Server traditional (WAS) and are
used for optimizing communication between local Enterprise JavaBeans (EJBs) and their clients within the same JVM, providing
a more efficient communication mechanism than remote method invocations.

Refactor EJBs to Restful APIs

<<WebSphere Work Area APIs>2
WebSphere Work Area APIs are specific to IBM WebSphere Application Server traditional (WAS) and are used for sharing
contextual information across multiple components in a single application or across multiple applications in a distributed environment.

Migrate your application components and configurations:
Refactor your application to use the chosen context-sharing solutions instead of WebSphere Work Area APIs.
This may involve updating your application code, configuration files, and setting up the required infrastructure components.

For Open Liberty: Consider using CDI (Contexts and Dependency Injection) with request or session-scoped beans for sharing context within a single application.
For distributed environments, you may use Jakarta RESTful Web Services (JAX-RS) or MicroProfile APIs for communication and context sharing.
For Spring Boot: Use Spring's built-in context-sharing mechanisms, such as request or session-scoped beans, or leverage Spring Cloud for sharing context across microservices.
Spring Cloud provides various distributed configuration and caching solutions, such as Spring Cloud Config Server and Spring Cloud Netflix components (e.g., Eureka, Ribbon).

<<Web Services Notification (WS-Notification)>>2
Web Services Notification (WS-Notification) is a family of specifications that define a standard way for web services to disseminate event notifications and updates to interested parties.
It is often used in combination with other web service specifications like WS-Eventing, WS-BaseNotification, and WS-BrokeredNotification

Migrate your application components and configurations:
Refactor your application to use the chosen event-driven solutions instead of WS-Notification.
This may involve updating your application code, configuration files, and setting up the required infrastructure components.

For Open Liberty: Consider using Jakarta Messaging (JMS), MicroProfile Reactive Messaging, or other messaging solutions that are supported in Open Liberty.
Integrate your application with messaging systems like Kafka or RabbitMQ as needed.
For Spring Boot: Use Spring Boot's extensive support for messaging systems, such as Spring Kafka, Spring RabbitMQ, or Spring Cloud Stream.
You can also use Spring WebFlux to create reactive, event-driven applications.

<<Web services XPath, XSLT, and XQuery APIs>>3
Web services XPath, XSLT, and XQuery APIs are used for querying and transforming XML data. XPath is a language used for
selecting nodes from XML documents, XSLT is used for transforming XML documents into other formats, and XQuery is a query language for XML data.

Open Liberty: Open Liberty supports standard Java APIs for XPath, XSLT, and XQuery, such as javax.xml.xpath, javax.xml.transform, and javax.xml.xquery.
You can continue to use these APIs in your Open Liberty applications without any changes.
Spring Boot: Spring Boot applications also support standard Java APIs for XPath, XSLT, and XQuery.
You can use these APIs in your Spring Boot applications without any changes.

<<WebSphere Web Services APIs and SPIs>>2
WebSphere Web Services APIs and SPIs are specific to IBM WebSphere Application Server traditional (WAS) and are used for developing,
deploying, and managing SOAP and RESTful web services.

Refactor your application to use the chosen web services solutions instead of WebSphere Web Services APIs and SPIs.
This may involve updating your application code, configuration files, and setting up the required infrastructure components.
For Open Liberty: Consider using Jakarta EE web services APIs, such as JAX-WS for SOAP web services or JAX-RS for RESTful web services.
Open Liberty has built-in support for these APIs.
For Spring Boot: Use Spring's built-in support for web services, such as Spring Web Services for SOAP web services or Spring MVC/REST for RESTful web services.
Spring Boot provides starter projects for easy integration and configuration of these web services.

<<WSDL2Java>>2
WSDL2Java is a tool  for generating Java code (client stubs, server-side skeletons, and data types) from a WSDL (Web Services Description Language) document.
This tool facilitates the development of SOAP web services and clients. Its Generates JAX-RPC specific class which is deprecated.

For Open Liberty: Consider using JAX-WS RI's wsimport tool, which are compatible with Open Liberty's support for JAX-WS.
For Spring Boot: You can use  JAX-WS RI's wsimport tool.

<<Java EE Application Deployment API>>3
The Java EE Application Deployment API is a set of APIs and SPIs that allow developers to deploy, configure, and manage
Java EE applications in a standardized manner.

Horizon CI/CD should take care of this

<<Java Portlet API>>2
The Java Portlet API is a set of APIs and specifications for developing portlets, which are web components designed to be
aggregated and displayed in a portal environment

<<Java APIs for XML Registries (JAXR)>>2
Java APIs for XML Registries (JAXR) is a Java API that provides a standard way to access various types of XML registries,
such as Universal Description, Discovery, and Integration (UDDI) or ebXML registries.

NA

<<OSGi Remote Bundle Repository (RBR) Service API>>1
OSGi Remote Bundle Repository (RBR) Service API provides a standard interface to manage the discovery, retrieval, and
provisioning of OSGi bundles in remote repositories. In the context of WebSphere Application Server traditional (WAS),
this API may have been used to access and manage remote OSGi bundles.

NA

<<OSGi Remote Admin Service API>>1
OSGi Remote Admin Service API is a part of OSGi Remote Services specification, which provides a standard way to expose
nd consume OSGi services across different JVMs, networks, or devices.

NA

<<WebSphere Integrated Solutions Console (ISC) APIs>>1
WebSphere Integrated Solutions Console (ISC) APIs are used to develop custom management extensions for the WebSphere Application Server (WAS)
traditional administration console. These custom extensions may provide additional functionality, such as monitoring or management of custom
components in your application.

Choose alternative solutions for custom management extensions:
Select suitable alternatives for implementing custom management extensions in your target environment (Open Liberty, Spring Boot, or OpenShift).
These alternatives may include custom RESTful APIs, custom management dashboards, or integration with existing management tools like Prometheus, Dynatrace, or Splunk.

<<Websphere Crypto and Security APIs>>
The com.ibm.websphere.crypto and com.ibm.websphere.security packages provide APIs for managing security and cryptographic
operations within the WebSphere Application Server (WAS) traditional environment. These APIs might be used for tasks such as
encryption, decryption, hashing, authentication, and authorization.

Select suitable alternatives for implementing security and cryptographic operations in your target environment (Open Liberty, Spring Boot, or OpenShift).
These alternatives may include Java Cryptography Extension (JCE), Java Cryptography Architecture (JCA), Spring Security, or other libraries and frameworks.

Refactor your application to use the chosen alternatives instead of WebSphere Security and Crypto APIs.
This may involve updating your application code, configuration files, and setting up the required infrastructure components.
For Open Liberty: Open Liberty provides its own security APIs and supports Java EE security features. You can use these APIs,
or choose to use other libraries and frameworks like JCE, JCA, or Spring Security.
For Spring Boot: Spring Boot supports Spring Security, a powerful and flexible security framework.
You can use Spring Security for authentication, authorization, encryption, and other security-related tasks.
Additionally, you can use JCE, JCA, or other libraries for cryptographic operations.

<<com.ibm.websphere.ActivitySession>>
com.ibm.websphere.ActivitySession is a WebSphere-specific API used to manage long-running, multi-request activities with transactional characteristics. It provides a way to group multiple transactions into a single unit of work that can be either committed or rolled back as a whole.

Migrate your workload components and configurations:
Refactor your application to use the chosen alternatives instead of ActivitySession. This may involve updating your application code, configuration files, and setting up the required infrastructure components.
For Open Liberty: Open Liberty provides support for JTA, which can be used for managing transactions across multiple resources. You can use JTA as an alternative to ActivitySession.
For Spring Boot: Spring Boot supports Spring's transaction management, which allows you to manage transactions in a declarative manner using annotations or XML configuration. You can use Spring's transaction management as an alternative to ActivitySession.

For microservices architecture, implement saga pattern. The Saga pattern is a distributed transaction management approach used in microservices architectures to maintain data consistency across multiple services, relying on a series of local transactions and compensating transactions in case of failure, rather than traditional atomic transactions.

<<com.ibm.websphere.appprofile>>
The com.ibm.websphere.appprofile package in WebSphere Application Server is used for managing application profiles. Application profiles allow you to define and manage the configuration settings and resources for your applications.

When deploying your workload in OpenShift, you can use ConfigMaps + Hashicorp Vault to manage configurations and sensitive data separately from your application. You can then inject these configurations into your application as environment variables or files, allowing you to keep your application configuration consistent across different environments.

<<WebSphere Batch APIs and SPIs>>
WebSphere Batch APIs and SPIs are used to create, manage, and execute batch jobs within the WebSphere Application Server environment. Batch jobs are typically long-running tasks that can be executed in the background, often for tasks like data processing or report generation.

When deploying your batch jobs in a containerized environment like OpenShift, you can use Kubernetes Jobs and CronJobs resources to manage and schedule batch jobs. Jobs are one-time executions of a task, while CronJobs allow you to schedule recurring jobs. By using Kubernetes Jobs and CronJobs, you can take advantage of the built-in features of the platform, such as auto-scaling, self-healing, and rolling updates.

